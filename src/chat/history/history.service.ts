/**
 * @file src/chat/history/history.service.ts
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Ç–∏–ø–∞–º.
 */

import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ChatMessage, ChatMessageRole, ChatType } from '../entities/chat-message.entity';
import { User } from '../../users/entities/user.entity';
import { Content } from '@google/generative-ai';

@Injectable()
export class ChatHistoryService {
  constructor(
    @InjectRepository(ChatMessage)
    private readonly chatMessageRepository: Repository<ChatMessage>,
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
  ) { }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —á–∞—Ç–∞.
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param type - –¢–∏–ø —á–∞—Ç–∞ ('chat' –∏–ª–∏ 'document').
   */
  async getHistory(userId: number, type: ChatType): Promise<Content[]> {
    const messages = await this.chatMessageRepository.find({
      where: { user: { id: userId }, type: type }, // <-- –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
      order: { createdAt: 'DESC' },
      take: 20,
    });

    if (messages.length === 0) return [];

    const sortedMessages = messages.reverse();
    const firstUserIndex = sortedMessages.findIndex(msg => msg.role === ChatMessageRole.USER);
    if (firstUserIndex === -1) return [];

    const validHistory = sortedMessages.slice(firstUserIndex);
    return validHistory.map((msg) => ({
      role: msg.role as 'user' | 'model',
      parts: [{ text: msg.content }],
    }));
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —á–∞—Ç–∞.
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param userContent - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param modelContent - –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
   * @param type - –¢–∏–ø —á–∞—Ç–∞.
   */
  async addMessageToHistory(userId: number, userContent: string, modelContent: string, type: ChatType): Promise<void> {
    const user = await this.userRepository.findOneBy({ id: userId });
    if (!user) {
      console.error(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
      return;
    }

    const userMessage = this.chatMessageRepository.create({
      user,
      role: ChatMessageRole.USER,
      content: userContent,
      type: type, // <-- –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
    });

    const modelMessage = this.chatMessageRepository.create({
      user,
      role: ChatMessageRole.MODEL,
      content: modelContent,
      type: type, // <-- –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
    });

    await this.chatMessageRepository.save([userMessage, modelMessage]);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —á–∞—Ç–∞.
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param type - –¢–∏–ø —á–∞—Ç–∞.
   */
  async getHistoryForUser(userId: number, type: ChatType) {
    const messages = await this.chatMessageRepository.find({
      where: { user: { id: userId }, type: type }, // <-- –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
      order: { createdAt: 'ASC' },
      take: 50,
    });

    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –ò —ç—Ç–æ —á–∞—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (messages.length === 0 && type === ChatType.DOCUMENT) {
      const user = await this.userRepository.findOneBy({ id: userId });
      if (!user) {
        // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –µ—â–µ –∂–∏–≤
        return [];
      }

      const welcomeMessageContent =
        `üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–î–æ–∫—É–º–µ–Ω—Ç—ã!**

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –û–°–ò. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π –∞–∫—Ç, —Ñ–æ—Ä–º—É –∏–ª–∏ –æ—Ç—á–µ—Ç.

---

### üöÄ **–ö–∞–∫ –Ω–∞—á–∞—Ç—å?**

**1. –ï—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ú–æ–∂–Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.
> *–ü—Ä–∏–º–µ—Ä:* **"–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∞–∫—Ç –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏ –∏–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –∂–∏–ª–æ–π –¥–æ–º"**

**2. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ—á–Ω–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏:**
–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.
> *–ü—Ä–∏–º–µ—Ä:* **"–ü–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"** –∏–ª–∏ **"–ö–∞–∫–∏–µ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω—ã?"**

---

### ‚öôÔ∏è **–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å?**

*   **–Ø –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å—ã:** –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —è –ø—Ä–∏—à–ª—é —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. üìù
*   **–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ:** –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
*   **–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–π–ª:** –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã, —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –≥–æ—Ç–æ–≤—ã–π '.docx' —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É —Å–∫–∞—á–∞—Ç—å! üìÑ

---

### ‚ö†Ô∏è **–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**

*   **–û—Ç–º–µ–Ω–∞:** –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ **"–û—Ç–º–µ–Ω–∞"** –∏–ª–∏ **"–ù–µ —Ö–æ—á—É"**, –∏ –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.
*   **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:** –Ø ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ **—Å–æ–∑–¥–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**. –ï—Å–ª–∏ —É –≤–∞—Å –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ñ–ö–• (–Ω–∞–ø—Ä–∏–º–µ—Ä, *"–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∑–∞—Ç–æ–ø–∏–ª–∏ —Å–æ—Å–µ–¥–∏?"*), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –∏—Ö –≤ —Å–æ—Å–µ–¥–Ω–µ–π –≤–∫–ª–∞–¥–∫–µ ‚Äî **"–ò–ò-–ß–∞—Ç"**. üí¨

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å, –∫–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.`;

      const welcomeMessage = this.chatMessageRepository.create({
        user,
        role: ChatMessageRole.MODEL,
        content: welcomeMessageContent,
        type: ChatType.DOCUMENT, // –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
      });

      await this.chatMessageRepository.save(welcomeMessage);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      return [{
        role: welcomeMessage.role,
        content: welcomeMessage.content,
        createdAt: welcomeMessage.createdAt,
      }];
    }


    return messages.map(msg => ({
      role: msg.role,
      content: msg.content,
      createdAt: msg.createdAt,
    }));
  }

  /**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞ –Ω–∏–º (–ø—É—Å—Ç–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 *-  @param modelContent - –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 * @param type - –¢–∏–ø —á–∞—Ç–∞.
 */
  async updateLastModelMessage(userId: number, modelContent: string, type: ChatType): Promise<void> {
    // 1. –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞
    const lastMessage = await this.chatMessageRepository.findOne({
      where: {
        user: { id: userId },
        type: type,
      },
      order: { createdAt: 'DESC' },
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É –Ω–µ–≥–æ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    if (lastMessage && lastMessage.role === ChatMessageRole.USER) {
      // –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
      // –∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–µ–≥–æ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.
      // (–í –Ω–∞—à–µ–π –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º user message —Å –ø—É—Å—Ç—ã–º model message,
      // –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏).

      const modelMessage = this.chatMessageRepository.create({
        user: lastMessage.user,
        role: ChatMessageRole.MODEL,
        content: modelContent,
        type: type,
      });
      await this.chatMessageRepository.save(modelMessage);

    } else if (lastMessage && lastMessage.role === ChatMessageRole.MODEL) {
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç –º–æ–¥–µ–ª–∏, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –µ–≥–æ
      lastMessage.content = modelContent;
      await this.chatMessageRepository.save(lastMessage);
    } else {
      console.error(`[HistoryService] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è userId: ${userId}`);
    }
  }
}